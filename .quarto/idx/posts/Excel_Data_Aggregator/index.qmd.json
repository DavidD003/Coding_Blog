{"title":"Getting Data From Many Excel Workbooks, with Python","markdown":{"yaml":{"title":"Getting Data From Many Excel Workbooks, with Python","author":"David De Sa","date":"2023-03-12","categories":["python","excel","automation"],"format":{"html":{"code-fold":true,"toc":true,"code-tools":true,"image":"Display_pic.png"}}},"headingText":"TL;DR","containsRefs":false,"markdown":"\n\n\n[Here is a video](https://youtu.be/RmFSYdMZLmI)! This article is about using Python to reach into many excel files that have a similar spreadsheet structure so as to pull out data from those sheets, potentially spread across multiple folders, into one place for aggregate use.\n\n# When your Excel is more like Excalibur ^[Don't worry I didnt spend too long thinking about this, it just came to me. And if you don't like it, we agree to disagree.]\nIt seems like an all too common tragedy that lots of team operate on the basis of sheets that were thrown together at some point in the distant past with varying degrees of thought put into future use cases. Now here you are, with the data you need like gold ore entombed in mountains of excel sheets. The irretrievable Excalibur in the stone.\n\nI encountered a problem where I had hundreds of excel sheets (each for a specific week) with data tables in each, and I needed to know which records in them met a certain criteria. I made some code in Python to pull the data out, this article will walk through it along with the video: \n\n## What Exactly Does This Code Do?\nThis code goes over all excel files with a name matching a specified pattern in a given folder (and its subfolders). In this example, these are invoices. The code will generate two master data tables in a new worksheet, one table with a row for each line item across all invoices, and another table with one row for each invoice with the bottom line information. \n\n## Is This For You?\nThis article is aimed at people who may have never used Python before but have some experience with coding of one form or another; I'll go through each line so you can understand and customize the code to your own use case. This is built on an assumption that the many sheets you want to dig into have at least some rhyme/reason as to their naming conventions, and internal sheet structure. Anything is possible with programming, but the more consistent your sheets, the simpler this code can be.\n\n### Try It Yourself!\nIf you want to run it yourself, you can [find the code on my GitHub page](https://github.com/DavidD003/Python-Tools). You'll need to [install Python and Jupyter](https://www.youtube.com/watch?v=qI3P7zMMsgY).^[Not my video, but I recommend it. It might seem daunting or like overkill, but trust me, it's the right way to go.] Python is the programming langauge we're using, Jupyter is the tool for organizing and executing blocks of Python commands so that we can understand, debug, and execute bits and peices of code at a time instead of always running the whole thing.\n\n# Code Walkthrough\n## Example Files\nI'm using an invoice template I picked up from [this website](https://www.myexcelonline.com/blog/free-excel-templates-and-spreadsheets/#section66).^[I'm not affiliated with it.]\n\nI have a master Invoice folder, with sub folders for each year. To simulate rela world messiness, some of these subfolders have different name patterns, and some have \"Paid\" vs \"Unpaid\" secondary folders wheres as some do not.\n\n![Main Folder](Folders1.png){#fig-f1}  \n\n![A Sub-Folder](Folders2.png){#fig-f2}\n\n![Another Sub-Folder](Folders3.png){#fig-f3}\n\n\n## Dependencies\nThe opensource tools from [Openpyxl](https://openpyxl.readthedocs.io/en/stable/) are what make this possible. Big thanks to everyone who has built them up. Other than that we're just using really standard Python libraries^[A library is a collection of code files defining functions and other kinds of code objects that we can use ourselves and build on. Like a toolbox.].\n```{python}\nfrom openpyxl import load_workbook\nimport openpyxl as pyxl\nfrom pathlib import Path\nimport os\nfrom datetime import datetime\n```\n\n## Debugging\nThe most common thing I tripped over in making this was typos and what not in my file paths. You can use this function to test whether or not a path you've entered is valid. \n```{python}\nPath(r\"C:\\Invoices\").exists()\n```\n\n## Specifying Which Files\nI made code blocks for 2 options; specifying all files manually, or specifying a directory and file name pattern to search for. Either way we start by initializing the container that our data will be stored in:\n```{python}\nsubitems = []  # Will contain the data we're aggregating for all items on invoices\ninvoiceTotal = []  # Will contain the final bottom-line data for each invoice\nfls = []  # Stores file paths for excel files to be searched\n```\n\n### Option 1: Naming Each File\nThe most controlled way would be to list all the files with the full path, something like this:\n```{python}\nprint(\"fls.append(r\\\"C:\\Invoices\\Invoices 2022\\Invoice 1.xlsx\\\")\")\n```\nBut I felt it was such an eyesore, and the folder structure made me prone to typo mistakes. So I made a helper function that would tighten things up, requiring only the file name and invoice year, and 'paid' vs 'unpaid' as input, and then spitting out the whole file path. The function uses the file year to decide which folder naming structure to use.\n```{python}\n# Helper function to build path strings when iterating through multiple files\n\n\ndef pthBld(flNm, flExtn=\"\", path_building_variable=('Paid', 0)):\n    \"\"\"Take a file name and expected file type, and based on some other input, add the rest of the file path for reference by workbook opening function\"\"\"\n    if flExtn != \"\":\n        flExtn = \".\"+flExtn\n    tp = path_building_variable[0]\n    yr = path_building_variable[1]\n    if yr == 22:\n        return (r\"C:\\Invoices\\Invoices 2022\"+chr(92)+tp+chr(92)+flNm+flExtn)\n    else:\n        return (r\"C:\\Invoices\\Invoices '\"+str(yr)+chr(92)+tp+chr(92)+flNm+flExtn)\n\n\n```\nAlways good to test a function is working after making it.\n```{python}\np = pthBld('Invoice 3', \"xlsx\", ('unPaid', 22))\np, \"Exists?: \"+str(Path(p).exists())\n```\nThen, the process of specifying all the files to search by individual names is just running a bunch of commands like this:\n```{python}\nprint(\"fls.append(pthBld('Invoice 1',\\\"xlsx\\\",('Paid',22)))\")\n```\n\n### Option 2: Full Directory Search on File names\nIf there are too many files names to sepcify one by one, or if there is some identifying pattern to the file names of interest, this option can be used. The code looked through the specified folder in entirety, including subfolders, and if a file name meets a criteria, saves the path to perform the data retrieval on that file.\n\n```{python}\n\n\ndef list_dir(directory):\n    \"\"\"This function will print out the path for every file in the specified directory (and any further nested directories)\"\"\"\n    output = []  # initialize\n    for filename in os.listdir(directory):\n        f = os.path.join(directory, filename)\n        # checking if it is a file\n        if os.path.isfile(f):\n            output.append(f)\n        elif os.path.isdir(f):\n            output.extend(list_dir(f))\n    return output\n\n\n```\nWhat if you wanted to omit one or multiple folders entirely? The 'else if' branch in the above function could have an extra required condition added to it such that only folders with a certain name structure, for example, are searched.\n\nHere is what we get when we test that function:\n```{python}\nlist_dir(r\"C:\\Invoices\")  # Test it works\n```\n\nHaving a list of *all* files within the directory, we need to screen for just the ones we want. For the sake of this example I simply keep the file paths that have the text \"invoice\" in the last 15 characters of the path:\n```{python}\nfor f in list_dir(r\"C:\\Invoices\"):\n    if \"invoice\" in f.lower()[-15:]:\n        fls.append(f)\n```\n\nAnd testing the output is as expected;\n```{python}\nfls\n```\n\nWe got rid of the junk_data.xlsx files.\n\n## Retrieving The Data\nHaving specified all the files paths for our excel files, we need to reach into them and grab that data into memory using Python. To do that, we iterate over the list of filepaths, opening the workbook using openpyxl. In this example I'm grabbing all data in each item row of the invoice to one table, and the bottom-line information to a second table. For the first operation, I iterate through the cells in which I know the data could be, just recording something if data is found. I use a list comprehension to carry out the workbook.cell(row,col).value function in one line of code but across all columns of the table, casting the date value to a string so that python doesn't convert it to a more complex datetime format which is admittedly more handy for anything but transferring back into excel.\n\nIn the second portion of the retrieval function for a given file, I use a more verbose and explicit way of grabbing all the data. There isn't any question for these data as to whether or nto they will be there, since each invoice has one of these data points, where as number of line items was variable. \n\nWhile iterating over the various workbooks, the data from each is stored in 2 lists. Each list is sent to a list of lists which will be used for reporting.\n\n```{python}\nfor fl in fls:\n    wb = load_workbook(filename=fl, data_only=True)\n    # First record data for the sub-items list\n    print(str(1+fls.index(fl))+chr(92)+str(len(fls)), fl)\n    for i in range(8, 30):  # Note arbitrary assumption on row limit. Starting point from existing sheet structure\n        # Grab invoice admin data\n        if wb['Commercial Invoice'].cell(row=i, column=3).value != None:\n            data = [fl]  # include filepath in data dump\n            # Invoice number to data dump\n            data.append(wb['Commercial Invoice'].cell(row=3, column=8).value)\n            data.extend([wb['Commercial Invoice'].cell(row=i, column=c).value if type(wb['Commercial Invoice'].cell(row=i, column=c).value) != datetime else str(\n                wb['Commercial Invoice'].cell(row=i, column=c).value) for c in range(2, 9)])  # Convert any data to string.. when re printed to excel it will cast to appropriate type\n            subitems.append(data)\n        else:\n            pass\n    # Now record to totals\n    data2 = [fl]  # initialize with filepath\n    data2.append(str(wb['Commercial Invoice'].cell(\n        row=4, column=8).value))  # invoice data\n    data2.append(wb['Commercial Invoice'].cell(\n        row=3, column=8).value)  # invoice num\n    data2.append(wb['Commercial Invoice'].cell(\n        row=13, column=8).value)  # subtotal\n    data2.append(wb['Commercial Invoice'].cell(row=14, column=8).value)  # VAT\n    data2.append(wb['Commercial Invoice'].cell(\n        row=15, column=8).value)  # Other Tax\n    data2.append(wb['Commercial Invoice'].cell(\n        row=16, column=8).value)  # Delivery\n    data2.append(wb['Commercial Invoice'].cell(\n        row=17, column=8).value)  # Deposit Recieved\n    data2.append(wb['Commercial Invoice'].cell(\n        row=18, column=8).value)  # Total\n    invoiceTotal.append(data2)\n```\n\nAs always, good to test that it worked. here we can see how many dsub items in total we observed across all invoices and see a sample of the first one. Likewise for the number of quotes overall, and a sample of the bottom line info collected.\n```{python}\n# Check we got what we wanted\nlen(subitems), subitems[0], len(invoiceTotal), invoiceTotal[0]\n```\n\n## Compile In Excel\nSo, having all of the data we want in memory in Python, we just need to print it to an Excel table. First we open a new table, then, using simple iterating indexes for row and column print-out references to avoid issues with duplicate invoice entries, we iterate through the recorded data and print it out to a worksheet cell. A new sheet is created for the Bottom Line Info and the same process executed, and the workbook saved.\n\n```{python}\n# Finally, print our aggregated data to a single subitems table\nwb = pyxl.Workbook()\nws = wb.active\nr = 0\nfor row in subitems:\n    r = r+1\n    c = 0\n    for index in range(len(row)):\n        c = c+1\n        ws.cell(row=r, column=c).value = row[index]\nwb.create_sheet('Bottom Line Info')\nws = wb['Bottom Line Info']\nr = 0\nfor row in invoiceTotal:\n    r = r+1\n    c = 0\n    for index in range(len(row)):\n        c = c+1\n        ws.cell(row=r, column=c).value = row[index]\nwb.save(r\"C:\\Invoices\\Aggregated_Data.xlsx\")\nwb.close()\n```\n\nAnd huzzah! The file appears;\n\n![Main Folder](Folders4.png){#fig-f4}  \n\n## Output\nTaking a look at the contents, we can see the plain data laid out. Knowing how we got it, we can manually add the titles and format as a table for sorting and filtering (although this could've been done with openpyxl as well!)\n\n![Result](Folders5.png){#fig-f5}  \n\n# Afterthoughts\nI hope that you see the same potential as I did when I first really cracked open this openpyxl tool. It is so liberating to understand that we can use python to get into the guts of excel. Taken to the nth degree, you can really make excel dance with this toolset. The way I look at it is that Excel really just becomes the user-friendly GUI for whatever in the world we want to program, the upper limit on complexity really just being what we can think up and program. In that vein, I've put together nother project I hope to share sometime soon.\n\nAnother thought is as to what else we can do in the world integrating python with our ubiquitous MS Office tools! As foor for thought, here is a [blog post](https://blog.aspose.com/words/python-ms-word-automation-create-edit-or-convert-ms-word-documents-using-python/#Parse-Word-Documents-using-Python) showing how we can create and peer into Word documents using Python. I can imagine this being useful for finding a document we know is hiding somewhere in a huge directory by having the code crawl the whole directory, opening word files and performing a key word search on them."},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"index.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.335","theme":"lux","title-block-banner":true,"title":"Getting Data From Many Excel Workbooks, with Python","author":"David De Sa","date":"2023-03-12","categories":["python","excel","automation"],"image":"Display_pic.png"},"extensions":{"book":{"multiFile":true}}}}}