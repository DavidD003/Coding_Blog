{
  "hash": "00aaa6533f1f495cdde891bfc91d0c8a",
  "result": {
    "markdown": "---\ntitle: \"Broadcasting and Heuristic Digit Classification\"\nauthor: \"David De Sa\"\ndate: \"2023-03-18\"\ncategories: [python, pyTorch, NeuralNetworks]\nimage: \"Cube_thumb.png\"\nformat:\n  html:\n    code-fold: true\n    toc: true\n    code-tools: true\ndraft: false\n---\n\n## TL;DR\nThe best way to learn is to teach, so in this post I walk through an example of putting broadcasting to use in a heuristic number reading app. Part 1 of two in making my first neural network.\n\n# Overview\nThe code in this post is largely from the awesome lessons over at [fast.ai](course.fast.ai), with the explanation all in my own words. Many thanks to that team for their amazing work. This is part one of two from the same lesson learning to make a digit classifier, the next will go into making the neural network that performs better at the same task.\n\n### What?\nWe're going to make a function to act as a benchmark for a neural network. The task it will perform is to correctly identify a number, given a hand drawn picture of it. \n\n### Why?\nYou need to crawl before you can [reject unripe tomatoes](https://www.reddit.com/r/oddlysatisfying/comments/zw3iwq/machine_that_rejects_unripe_tomatoes)^[Too fun not to share though I think this is a machine vision implementation without neural nets. Probably just averaging colour across a pixel range to trigger the paddles.], and that before you can comfortably learn to tie a necktie while your Tesla is whipping around corners with you in the drivers seat.\n\n### Who?\n[Who am I](https://davidd003.github.io/Coding_Blog/about.html)!? Who are you?!\n\n### How?\nUsing [PyTorch](https://pytorch.org/)^[If it ain't 'py', it ain't python, right?], an opensource toolkit for building neural networks. Truly the shoulders of giants at our finger tips.\n\n# Code Review\nMaking a neural network to solve a problem is a bunch of mumbo jumbo if we're not actually performing better than a simpler heuristic function. To test that, we will start off by constructing a simple classification that classifies a digit based on which average digit image it is nearest to (You'll see what I mean later). This will determine the score-to-beat with the neural network we make in the next post.\n\nLet's get into it!\n\n::: {.callout-note collapse=\"true\"}\nThe required dependencies!:`scikit-learn`, `fastbook`, `matplotlib`\n:::\n\n::: {.cell execution_count=1}\n``` {.python .cell-code code-line-numbers=\"true\"}\n# Install dependency\nfrom fastbook import *\nfrom fastai.vision.all import *\nfrom sklearn.datasets import load_digits\nimport fastbook\n\nfastbook.setup_book()\n\n\nmatplotlib.rc(\"image\", cmap=\"Greys\")\n```\n:::\n\n\n## Data Acquisition\nIn any real world ML application, data acquisition can be one of the more costly  parts of the process, luckily not so for this simple learning example. \n\nWe're using a variant of the classic NIST database, a collection of images of hand drawn numbers that provided the means for benchmarking in earlier days of ML. \n\nI had trouble wrangling with the various sources for this database online, the simplest workable solution I could find for us to get a grip on these images was to just import the datasets library that comes with installing the scikit-learn package.\n\n::: {.callout-tip collapse=\"true\"}\n## Understand Your Input!\n\nPre-processing data before even touching any neural net methods can improve your final performance. Note the data set information offered at the [source page](https://archive.ics.uci.edu/ml/datasets/Optical+Recognition+of+Handwritten+Digits): \n\n> We used preprocessing programs made available by NIST to extract normalized bitmaps of handwritten digits from a preprinted form. From a total of 43 people, 30 contributed to the training set and different 13 to the test set. 32x32 bitmaps are divided into nonoverlapping blocks of 4x4 and the number of on pixels are counted in each block. This generates an input matrix of 8x8 where each element is an integer in the range 0..16. This reduces dimensionality and gives invariance to small distortions.\n:::\n\n::: {.cell execution_count=2}\n``` {.python .cell-code code-line-numbers=\"true\"}\nmnist = load_digits()\n```\n:::\n\n\nAlways good to get to know your data..\n\n::: {.cell execution_count=3}\n``` {.python .cell-code code-line-numbers=\"true\"}\nmnist.keys()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\ndict_keys(['data', 'target', 'frame', 'feature_names', 'target_names', 'images', 'DESCR'])\n```\n:::\n:::\n\n\nWhat's in here?\n\n::: {.cell execution_count=4}\n``` {.python .cell-code code-line-numbers=\"true\"}\n# Observing y value for data sequence\nmnist[\"target\"], \"# targets: \" + str(len(mnist[\"target\"]))\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n(array([0, 1, 2, ..., 8, 9, 8]), '# targets: 1797')\n```\n:::\n:::\n\n\nSo we have 1797 numbers in this data set.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code code-line-numbers=\"true\"}\nn0 = [[n for n in mnist[\"data\"][0][i * 8: i * 8 + 7]] for i in range(0, 8)]\nn0, mnist[\"images\"][0]\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n([[0.0, 0.0, 5.0, 13.0, 9.0, 1.0, 0.0],\n  [0.0, 0.0, 13.0, 15.0, 10.0, 15.0, 5.0],\n  [0.0, 3.0, 15.0, 2.0, 0.0, 11.0, 8.0],\n  [0.0, 4.0, 12.0, 0.0, 0.0, 8.0, 8.0],\n  [0.0, 5.0, 8.0, 0.0, 0.0, 9.0, 8.0],\n  [0.0, 4.0, 11.0, 0.0, 1.0, 12.0, 7.0],\n  [0.0, 2.0, 14.0, 5.0, 10.0, 12.0, 0.0],\n  [0.0, 0.0, 6.0, 13.0, 10.0, 0.0, 0.0]],\n array([[ 0.,  0.,  5., 13.,  9.,  1.,  0.,  0.],\n        [ 0.,  0., 13., 15., 10., 15.,  5.,  0.],\n        [ 0.,  3., 15.,  2.,  0., 11.,  8.,  0.],\n        [ 0.,  4., 12.,  0.,  0.,  8.,  8.,  0.],\n        [ 0.,  5.,  8.,  0.,  0.,  9.,  8.,  0.],\n        [ 0.,  4., 11.,  0.,  1., 12.,  7.,  0.],\n        [ 0.,  2., 14.,  5., 10., 12.,  0.,  0.],\n        [ 0.,  0.,  6., 13., 10.,  0.,  0.,  0.]]))\n```\n:::\n:::\n\n\nAnd it looks like the 'data' entity is a list of one dimensional vectors, listing out the 64 pixels of each image, whereas the 'images' entity is the same info already organized into the 8x8 array of pixels.\n\nThe values in the arrays are from 0-16, as described in the source documentation. Important to keep in mind that we might want to normalize them all to a range from 0 to 1 for our purposes. We'll do that later.\n\nI had to do some funny indexing to tease that out. Something I learned along the way was the fantastic .view() function of the Tensor object in pyTorch. Tensors are like a numpy array, have a lot of features that will be critical for quickly creating neural nets. This object type was imported with fastbook.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code code-line-numbers=\"true\"}\nTensor(mnist[\"data\"][0]).view(-1, 8)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\ntensor([[ 0.,  0.,  5., 13.,  9.,  1.,  0.,  0.],\n        [ 0.,  0., 13., 15., 10., 15.,  5.,  0.],\n        [ 0.,  3., 15.,  2.,  0., 11.,  8.,  0.],\n        [ 0.,  4., 12.,  0.,  0.,  8.,  8.,  0.],\n        [ 0.,  5.,  8.,  0.,  0.,  9.,  8.,  0.],\n        [ 0.,  4., 11.,  0.,  1., 12.,  7.,  0.],\n        [ 0.,  2., 14.,  5., 10., 12.,  0.,  0.],\n        [ 0.,  0.,  6., 13., 10.,  0.,  0.,  0.]])\n```\n:::\n:::\n\n\n::: {.callout-tip}\n## Tensor Views\nUsing -1 in the argument for the view function will auto-size the tensor based on the number of elements in the array, and the other dimensions specified. This should come in handy!\n:::\n\nFor a [classification task](https://docs.aws.amazon.com/machine-learning/latest/dg/types-of-ml-models.html) such as this, it's important to keep in mind that our data should be balanced in quantity per class. Let's take a look at how many we've got. \n\n::: {.cell execution_count=7}\n``` {.python .cell-code code-line-numbers=\"true\"}\n[str(i) + \": \" + str(list(mnist[\"target\"]).count(i))\n for i in range(10)]  # Count of each digit in dataset\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n['0: 178',\n '1: 182',\n '2: 177',\n '3: 183',\n '4: 181',\n '5: 182',\n '6: 181',\n '7: 179',\n '8: 174',\n '9: 180']\n```\n:::\n:::\n\n\nSo, a little imbalance but nothing crazy. Worth checking though...\n\n::: {.callout-warning}\n## Beware Naive Optimization\nIf we train on a million images of 7's, and only a thousand 1's, we can be duped into thinking we're rocking a 0.1% error rate by a naive model that guesses '7' no matter what you give it!\n:::\n\n### Picturing Inputs\n\n:::{#fig-numbersamples}\n\n::: {.cell .column-page layout-ncol='5' execution_count=8}\n``` {.python .cell-code code-line-numbers=\"true\"}\nfor i in range(10):\n    show_image(mnist[\"images\"][-i] / 16)  # Visualizing example digit\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-9-output-1.png){width=93 height=93}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-9-output-2.png){width=93 height=93}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-9-output-3.png){width=93 height=93}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-9-output-4.png){width=93 height=93}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-9-output-5.png){width=93 height=93}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-9-output-6.png){width=93 height=93}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-9-output-7.png){width=93 height=93}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-9-output-8.png){width=93 height=93}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-9-output-9.png){width=93 height=93}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-9-output-10.png){width=93 height=93}\n:::\n:::\n\n\nA few examples of our data. Can you read them?\n:::\nTurns out that pre-processing that comes baked in does make them pretty grainy. But nothing some training can't solve.\n\n### Bucketing Classes\nWe need to separate out our inputs for training purposes. We'll iterate across the 'targets' list, using the target numbers themselves as the index value to dump the corresponding 'image' data into the storage bin.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code code-fold=\"show\" code-line-numbers=\"true\"}\nstacked = []\n# This loop because stacked=[[]]*10 makes 1 list in list, with 10 copies of pointers... need separate objects\nfor i in range(10):\n    stacked.append([])\n# Assign all images to the right collection in the 'stacked' list, indexed by target\nfor i in range(len(mnist[\"target\"])):\n    stacked[mnist[\"target\"][i]].append(mnist[\"images\"][i])\nlens = [len(stacked[i]) for i in range(10)]\nlens, min(lens)  # Confirm counts of samples\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n([178, 182, 177, 183, 181, 182, 181, 179, 174, 180], 174)\n```\n:::\n:::\n\n\nSo that worked, we now have a list of lists of arrays, the arrays being interpreted as images, the lists being collections of images, with all images in a given collection being an image of the same hand drawn number. And we see that we have the fewest samples of numbers 8's, so we'll take only that many samples (174) of every other image for our dataset. \n\n### Segmentation\nThe next step is to define which data will be our training, and our validation set. It was important to bucket out our data first so by randomly sampling our data we didn't generate a validation set with a large imbalance in the number of classes to be tested in it. \n\nFirst we convert to a tensor, then segment training from validation data. Arbitrarily taking 20 examples from each digit, so, 11.5% of the total data set towards validation.\n\nWe'll print out the size of these collections and take a peek at a sample to make sure we indexed right.\n\n:::{#fig-checkSamp}\n\n::: {.cell execution_count=10}\n``` {.python .cell-code code-line-numbers=\"true\"}\n# To make dataset a tensor, make it same number of dimensions\nstacked = tensor([x[:174] for x in stacked])\n# Segmentation: Pull 20 of each digit out of training set\ntest = [dig[-20:] for dig in stacked]\ntrain = [dig[:-20] for dig in stacked]\n# Confirm counts of samples\n[len(test[i]) for i in range(10)], [len(train[i]) for i in range(10)]\nshow_image(stacked[3][0])  # Check sample\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n<Axes: >\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-11-output-2.png){width=93 height=93}\n:::\n:::\n\n\nIs it a 3?\n:::\nNice.\n\nIt's important to keep track of what's what.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code code-fold=\"show\" code-line-numbers=\"true\"}\ntype(train), type(train[0]), type(train[0][0]), [\n    type(test), type(test[0]), type(test[0][0])]\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n(list, torch.Tensor, torch.Tensor, [list, torch.Tensor, torch.Tensor])\n```\n:::\n:::\n\n\nOk so our top level containers for training/testing data are basic python lists. Within those, we have 10 collections, one for each integer. Those are Tensors. And then, each image (a collection of pixels unto itself) within those tensors, are also Tensor type objects.\n\nInstead of a basic Python list, we will need the top level containers as tensors to leverage the pyTorch functionality built into them. luckily it's an easy conversion\n\n::: {.cell execution_count=12}\n``` {.python .cell-code code-line-numbers=\"true\"}\n# Converts PyList of tensors to tensor of tesnors (join in new dimensions, retain target indexing)\ntrain = torch.stack(train)\ntest = torch.stack(test)\ntrain.shape, test.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n(torch.Size([10, 154, 8, 8]), torch.Size([10, 20, 8, 8]))\n```\n:::\n:::\n\n\nNow here is a crtiical piece, working with multidimensional arrays and keeping in mind what we understand these to be. Our test and training tensors have the same dimensionality but not the same size. \n\n## Building Benchmark Function\nWhere it gets fun now is in averaging and such across these dimensions. By doing so we can get the 'average drawing of a number,' which will be integral to creating our benchmark classification function.\n\n### The 'Average' Digit\n\n:::{#fig-ideals}\n\n::: {.cell .column-page layout-ncol='5' execution_count=13}\n``` {.python .cell-code code-line-numbers=\"true\"}\nmeans = torch.stack([x.mean(0) for x in train])  # Compute the average digit\nfor i in range(10):\n    show_image(means[i])\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-14-output-1.png){width=93 height=93}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-14-output-2.png){width=93 height=93}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-14-output-3.png){width=93 height=93}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-14-output-4.png){width=93 height=93}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-14-output-5.png){width=93 height=93}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-14-output-6.png){width=93 height=93}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-14-output-7.png){width=93 height=93}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-14-output-8.png){width=93 height=93}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-14-output-9.png){width=93 height=93}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-14-output-10.png){width=93 height=93}\n:::\n:::\n\n\nNow those are some digits!\n:::\nI hope you think this is as cool as I do! It calls to mind the idea of seeing a video of someone doing something routine every day like brushing their teeth, but at a million times speed, all the variations of movement wash out and create this somewhat blurry view of the general pattern. Like a mashing of all possible worlds. What did that code do, how did we get this? Let's tear this one apart.\n\nFirst of all, we're dealing with a 4 dimensional tensor, `train`. When we jumped into a list comprehension iterating `for x in train`, we 'stepped into' that 0^th^ dimension, so to speak. Then any given element `x` is a 3 dimensional tensor. \n\nWe will go through 10 of them, one for each integer, and each will contain 174 `8x8` images. When we take the mean in the 0^th^ dimension of `x`, we are saying \"Across these 172 samples of 8x8 containers, what are the average values for element?\" A visual way to think of this is that you have 174 pages, each with an `8x8` grid of numbers on it. We will reduce it to a single page by taking the average through all the pages, for each number; i.e. the 1^st^ number on our single summary page will be the average of the 1^st^ number from all of the 174 pages. The 2^nd^ number will be the average of all the 2^nd^ numbers, etc. \n\nIn practice, this means that the more samples in which a given pixel was inked, the darker that pixel will be in the average.\n\n### Least-Difference As Decision\nRecall, our goal is first create a benchmark classification function that doesn't use neural network methodologies. Now that we have the aberage, or 'archetypal' form of each digit, we can define a function to compare an input digit against the ideal digits to identify which it has the least difference with.\n\n::: {.callout-tip collapse=\"true\"}\n## Comparing Differences Between Pictures?\n\nSince all of the 'images' we're talking about are represented as a collection of 64 numbers, each number indicating a pixels brightness, taking the difference between two images as a whole just entails taking the difference between each pair of corresponding pixels from each, and then taking the average or using some other function to convert those 64 differences into one number. \n:::\n\nFortunately, the fastbook library again serves up a toolkit: the module F, containing functions we'll need in our travels on any ML journey.\n\nLet's use the L1 loss and MSE as loss functions^[Check out [this link](https://mathworld.wolfram.com/L2-Norm.html) for more on these norms. Be aware that MSE is just a colloquial name for the L2 norm, and also that a norm alone isn't a 'loss function' *per se*. Any function at all is a loss function if you use it to calculate loss. That cetainly doesn't mean it'll be a good one. Books could be written on the topic though, so we'll leave it there.]. We'll pass in the first example of a zero we have against the 'average' zero:\n\n:::{#fig-zeroTozero}\n\n::: {.cell .column-page layout-ncol='2' execution_count=14}\n``` {.python .cell-code code-line-numbers=\"true\"}\nshow_images([test[0][19], means[0]])\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-15-output-1.png){width=466 height=222}\n:::\n:::\n\n\nZero to hero?\n:::\n\n::: {.cell execution_count=15}\n``` {.python .cell-code code-line-numbers=\"true\"}\n\"L1 loss: \"+str(F.l1_loss(test[0][18], means[0]).item()), \"MSE Loss: \" + \\\n    str(F.mse_loss(test[0][18], means[0]).sqrt().item())\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n('L1 loss: 1.9119317531585693', 'MSE Loss: 3.072631359100342')\n```\n:::\n:::\n\n\nOther than validating the fact that we aren't getting any errors due to bad inputs, this doesn't tell us much. Generally, the MSE loss will always be greater than the L1 loss. Because loss increases exponentially with deviation from target, in principle, it is a better loss function as it will give a stronger learning signal in training; i.e. a step in the right direction will have greater effect on minimizing the loss function, at greater distance from target. But I'm getting ahead of myself here.\n\nA more meaningful test that this is making sense would be to compare the error of a different sample digit against our ideal zero. Lets go with a seven.\n\n:::{#fig-sevenTozero}\n\n::: {.cell .column-page layout-ncol='2' execution_count=16}\n``` {.python .cell-code code-line-numbers=\"true\"}\nshow_images([test[7][0], means[0]])\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-17-output-1.png){width=466 height=222}\n:::\n:::\n\n\nLucky Number Seven?\n:::\n\n::: {.cell execution_count=17}\n``` {.python .cell-code code-line-numbers=\"true\"}\n\"L1 loss: \"+str(F.l1_loss(test[7][0], means[0]).item()), \"MSE Loss: \" + \\\n    str(F.mse_loss(test[7][0], means[0]).sqrt().item())\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n('L1 loss: 4.754464149475098', 'MSE Loss: 6.698919296264648')\n```\n:::\n:::\n\n\nSeems about right- a random zero sample from the database has a lower measure of loss when tested against the average zero than a random seven does. Now that we know the measure is behaving, we'll pack into a function so we can call on it and simplify our upcoming code. We'll use the L1 norm:\n\n::: {.cell execution_count=18}\n``` {.python .cell-code code-fold=\"show\" code-line-numbers=\"true\"}\ndef mnist_distance(a, b): return (a-b).abs().mean((-1, -2))\n\n```\n:::\n\n\n::: {.callout-tip}\n## Coding The L1 Norm\nI would really encourage you to simmer with the function defined in this code block and make sure you understand how it works:\n - We're taking the difference of each element in each input by subtracting\n - We're taking the absolute value of all those differences\n - We're averaging across the last two dimensions of the tensor. Think about it... what happens if there is more than just two dimensions\n:::\n\n## Computing The Benchmark\nHaving the benchmark function, lets take it for a whirl. We will pass in the average digits as one tensor, and the training digits as the other. This is a critical point! A foundational strategy for the approach to neural nets is that we work with tensor-wise operations. Instead of taking the difference of one image against another, one at a time, we pass entire tensors into functions that compute across them. This becomes an absolute necessity for the sake of algorithmic and code execution efficiency. \n\n::: {.cell execution_count=19}\n``` {.python .cell-code code-line-numbers=\"true\"}\nmnist_distance(train, means)  # Intentional error to demonstrate\n```\n\n::: {.cell-output .cell-output-error}\n```\nRuntimeError: The size of tensor a (154) must match the size of tensor b (10) at non-singleton dimension 1\n```\n:::\n:::\n\n\nAn error! The error message points to a mismatch in the sizes of our tensors. Let's take at these:\n\n::: {.cell execution_count=20}\n``` {.python .cell-code code-line-numbers=\"true\"}\nmeans.shape, train.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n(torch.Size([10, 8, 8]), torch.Size([10, 154, 8, 8]))\n```\n:::\n:::\n\n\nRight, our `means` contains 10 images, each 8 by 8 pixels, one image for each 'average' digit. Meanwhile `train` is storing our training data, so it has a *collection* of images for each digit. So the tensor has greate dimensionality because for each digit there are 154 images of 8x8 pixels.\n\nThe mnist_distance function we made subtracts every element in the input tensors, so it makes sense that there needs to be an equal number of individual elements for the computer to make sense of the instruction. When I say element in this context I mean the numeric value assigned to each pixel in each image indicating its brightness. So at first blush, we'd think we need to expand the `means` tensor so as to contain many copies of the each average digit.\n\nHow can we fix this? This reveals a critical lesson in the technique called broadcasting.\n\n::: {.callout-note}\n## Broadcasting\nBroadcasting is a functionality [pyTorch](https://pytorch.org/docs/stable/notes/broadcasting.html) brings over from [Numpy](https://numpy.org/doc/stable/user/basics.broadcasting.html). From the docs: \n\n> The term broadcasting describes how NumPy treats arrays with different shapes during arithmetic operations. Subject to certain constraints, the smaller array is “broadcast” across the larger array so that they have compatible shapes. Broadcasting provides a means of vectorizing array operations so that looping occurs in C instead of Python. It does this without making needless copies of data and usually leads to efficient algorithm implementations.\n:::\n\nInstead of using Python to make many copies of our average digits, we can just alter the structure of the tensor `means` in memory so as to make it compatible for computation with `train`. To do this, we use the `unsqueeze` function to add an extra dimension along which we will broadcast. \n\n::: {.cell execution_count=21}\n``` {.python .cell-code code-fold=\"show\" code-line-numbers=\"true\"}\ntrain.shape, means.unsqueeze(1).shape\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\n(torch.Size([10, 154, 8, 8]), torch.Size([10, 1, 8, 8]))\n```\n:::\n:::\n\n\nThe way I look at this is like folders in a file system! In this diagram, the `unsqueeze` function added an extra layer to the nested boxes making up `means`.\n\n![Visualizing Broadcasting](Broadcasting_Basics.drawio.png){#fig-broadcast}  \n\n\nFrom the bottom up (i.e. right to left of tensor indices) we have:\n\n - A folder with 8 numbers^(\"files\" in this analogy- the foundational stuff we are actually storing!) -  the pixel brightness values for the 8 pixels in a single row.\n - A folder with 8 of the preceding folders - one for each row of pixels making an image\n - A folder with 154 of the preceding folders - In `train`, the 154 different samples of hand written digits, for a given integer. In `means`, a single box, redundant on its own, but serving as the thing to broadcast\n - A directory (our tensor) with 10 of the preceding folders, one for each integer `0` through `9`\n\nLets test that this modified structure works:\n\n::: {.cell execution_count=22}\n``` {.python .cell-code code-line-numbers=\"true\"}\nres = mnist_distance(train, means.unsqueeze(1))\nprint(res.shape)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntorch.Size([10, 154])\n```\n:::\n:::\n\n\nGreat, no error! We see the result is a tensor structured as an array of 10 vectors, each with 154 elements. In other words,a directory of 10 folders, each with 154 files. \n\nWe understand the numbers stored to be the L1 norm loss measures for each of the 154 samples of each digit, against the 'average' version of that digit. So by looking for the min and max values within these 10 vectors, we can identify the best and worst samples, as compared against their target digit:\n\n:::{#fig-BestAndWorst}\n\n::: {.cell layout-ncol='2' execution_count=23}\n``` {.python .cell-code code-line-numbers=\"true\"}\nbestWorstIndex = [(list(x).index(min(x)), list(x).index(max(x))) for x in res]\ni = 0\nfor b, w in bestWorstIndex:\n    show_image(train[i][b])\n    show_image(train[i][w])\n    i = i+1\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-24-output-1.png){width=93 height=93}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-24-output-2.png){width=93 height=93}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-24-output-3.png){width=93 height=93}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-24-output-4.png){width=93 height=93}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-24-output-5.png){width=93 height=93}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-24-output-6.png){width=93 height=93}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-24-output-7.png){width=93 height=93}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-24-output-8.png){width=93 height=93}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-24-output-9.png){width=93 height=93}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-24-output-10.png){width=93 height=93}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-24-output-11.png){width=93 height=93}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-24-output-12.png){width=93 height=93}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-24-output-13.png){width=93 height=93}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-24-output-14.png){width=93 height=93}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-24-output-15.png){width=93 height=93}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-24-output-16.png){width=93 height=93}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-24-output-17.png){width=93 height=93}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-24-output-18.png){width=93 height=93}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-24-output-19.png){width=93 height=93}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-24-output-20.png){width=93 height=93}\n:::\n:::\n\n\nThe Best and Worst!\n:::\nSo we can get a sense for where this benchmark digit classification function might go wrong, such as by taking that worst 1 for a 7, or the worst 9 for a 4.\n\nWe're close now. The goal here is a single performance measure, classification accuracy, for the benchmark function against all input data. That will be the score to beat with the neural entwork implementation. \n\nWhat we need to do is extend the logic of that last code segment, comparing each digit to not only the 'average' version of it's target number, but also against the average version of every other number. To do this, we'll have to broadcast some more. this is the structure we'll use:\n\n::: {.cell execution_count=24}\n``` {.python .cell-code code-line-numbers=\"true\"}\nprint('Further unsqueezed shape of means: ' +\n      str(means.unsqueeze(1).unsqueeze(1).shape))\nprint('Unsqueezed shape of train data   : ' + str(train.unsqueeze(0).shape))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFurther unsqueezed shape of means: torch.Size([10, 1, 1, 8, 8])\nUnsqueezed shape of train data   : torch.Size([1, 10, 154, 8, 8])\n```\n:::\n:::\n\n\nWhy? Let's go back to our norm function:\n`def mnist_distance(a, b): return (a-b).abs().mean((-1, -2))`\nThe last two dimensions will be averaged to get a score number, and we want a score number for every combination of sample image, and 'average' digits 0-9. Thinking of nested boxes again, we should expect the structure of our result tensor to have a path through it to each one of these combinations.^[There is some ambiguity as to how we could've gone about this, as to wehther or not we thought about the digit from which samples are drawn as the first layer, or the average digit being tested against as the first layer. I chose the latter.] To build this path, we first imagine it:\n\n - The tensor as our outermost box should have 10 boxes in it, one for each 'average' digit; in this box that digit will be the comparison item against every sample.\n - Within each of those boxes will be 10 more boxes, one for each of the sample pools (all samples of 0's, all samples of 1's, 2's, etc.)\n - Within each of those boxes will be 154 boxes, each containing the data for one sample image. The data is stored in array structure, i.e. 2 boxes, but we can leave it at that since at that level, all those 64 numbers per digit will be averaged out.\n\nFirst of all, we unsqueeze the `means` tensor we had at the first index *again* so that the dimension where the differentiation between average digit occurs stays at the highest dimension. The result is that 10,1,1,8,8 tensor. We unsqueezed multiple times because we want *copies of copies* of each of the mean digits. One level of copying at the layer of sample pool, and copying againt to each sample image within the sample pool. \n\nNext, we need to make the `train` tensor compatible with this. The thought is that this entire training set will be compared against each average, so there will need to be 10 copies of it. To achieve that we unsqueezed at the 0^th^ index to allow for broadcasting to more copies.\n\nThe result is that the 10,1,1,8,8 tensor and 1,10,154,8,8 tensors are broadcast to be equal in shape to perform computation. First in dimension 1, the train data is broadcast (10 copies created), in dimension 2 the mean data is broadcast creating 10 copies of everything below. Then in the 3rd dimension, the means is again broadcast up to 154, creating 154 more copies of what is in the dimensions below. In this way, the 1st dimension corresponds to the different 'ideal' or mean  digits 0-9, the 2nd dimension corresponds to all the data corresponding to the training data for digits 0-9. The 3rd dimension differentiates between individual samples of a given training digit. And the 4th and 5th dimension get us to individual pixels of those images.\n\n![And they say broadcast is dead!](Broadcasting_Full.drawio.png){#fig-bigbroadcast}  \n\nLet's see if it worked!\n\n::: {.cell execution_count=25}\n``` {.python .cell-code code-line-numbers=\"true\"}\nall_comparison = mnist_distance(\n    means.unsqueeze(1).unsqueeze(1), train.unsqueeze(0))\nprint('shape of all comparison:     '+str(all_comparison.shape))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nshape of all comparison:     torch.Size([10, 10, 154])\n```\n:::\n:::\n\n\nGreat, no error!\n\nThe result is 3 dimensions instead of 5 because the mnist_distance function took the average across the last two dimensions, reducing the data in them to a scalar stored in the 3rd dimension. So for the 0^th^ dimension, we have 10 collections of data (horizontal slices), which is the ideal digit is compared against the 154 samples for each digit as indexed in the 1^st^ dimension (vertical slices), and the 2^nd^ dimension (depth) indexing the 154 samples.\n\nPicturing the 3D result as a cube, each element in the cube contains the numeric result from mnist_dist for the comparison of an ideal and a test image. Any given sample image is compared against all 9 ideal digits, and where the miniumum mnist_distance corresponds to the integer that the training digit actually is, the benchmark function was correct.\n\n![Behold, the data cube! *a.k.a Visualizing a Tensor*](Data_cube.png){#fig-datacube}  \n\nAlright, so we have a big tensor with every image compared against every 'average' digit. Now we need to do some smart indexing to identify the lowest loss function score for each sample image, indicating what number the benchmark function *thinks* that that image is, and to summarize all that output as a performance metric for us to beat.\n\nHere are the lines in the following block where the maagic is baked into the cake:\n 3. Generalizing the function so it can handle inputs of varibable size\n 11. Using iterator to index an entire vertical slice of the data cube, yielding a 2D tensor. \n  i) The `.min(dim=0)` looks across the 0^th^ dimension of the input tensor, in this case the 2D array. It yields a tensor containing the minimum values in each slice. the `.indices` yields the indices at which those values were identified.\n  ii) In the bigger picture, `.min(dim=0)` is looking at single columns of 10 numbers and returning the minimum value.\n 12. Tallying up how many classifications were attributed to each number 0 through 9.\n 13. Because our target values are number 0 to 9, they lend themselves to being used as indices. This same code for another kind of task might look very different. Here, our iterating/slicing strategy is such that we know the true digit for all the data points in iteration 0 are 0, iteration 1 are 1, etc, so we can simply take the number of classifications made to the current iteration number as the same thing as classifications to correct category, and add that to our running total.\n\n\n:::{#fig-bmkConfMat}\n\n::: {.cell execution_count=26}\n``` {.python .cell-code code-line-numbers=\"true\"}\ndef acc_rslt(comp):\n    c = comp.clone()\n    x, y, z = [i for i in c.shape]\n    totSamp = y*z\n    totCorrect = 0  # Tallier\n    confM = []  # confusion matrix will be result of stacking the bincount results\n    for i in range(10):\n        # Taking slice yields 2D object, shape (10,154), take min in each column (axis 1) to get digit prediction\n        # Retrieve indices i.e. predictions for all comparisons\n        # Yields a 1D tensor with count of integers indexed by integer\n        id = c[:, i, :].min(dim=0).indices\n        predCnt = torch.bincount(id, minlength=10)\n        totCorrect = totCorrect+predCnt[i]\n        confM.append(predCnt)\n    confM = torch.stack(confM)\n    return (totCorrect/totSamp*100), confM\n\n\nacc, conf = acc_rslt(all_comparison)\nprint('accuracy: '+str(round(acc.item(), 2))+'%')\n\ndf = pd.DataFrame(conf)\ndf.style.set_properties(**{'font-size': '6pt'}).background_gradient('Greys')\ndf.style.set_table_styles([dict(selector='th', props=[(\n    'text-align', 'center')])]).set_properties(**{'text-align': 'center'})\n```\n\n::: {.cell-output .cell-output-stdout}\n```\naccuracy: 89.94%\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=26}\n```{=html}\n<style type=\"text/css\">\n#T_8096c th {\n  text-align: center;\n}\n#T_8096c_row0_col0, #T_8096c_row0_col1, #T_8096c_row0_col2, #T_8096c_row0_col3, #T_8096c_row0_col4, #T_8096c_row0_col5, #T_8096c_row0_col6, #T_8096c_row0_col7, #T_8096c_row0_col8, #T_8096c_row0_col9, #T_8096c_row1_col0, #T_8096c_row1_col1, #T_8096c_row1_col2, #T_8096c_row1_col3, #T_8096c_row1_col4, #T_8096c_row1_col5, #T_8096c_row1_col6, #T_8096c_row1_col7, #T_8096c_row1_col8, #T_8096c_row1_col9, #T_8096c_row2_col0, #T_8096c_row2_col1, #T_8096c_row2_col2, #T_8096c_row2_col3, #T_8096c_row2_col4, #T_8096c_row2_col5, #T_8096c_row2_col6, #T_8096c_row2_col7, #T_8096c_row2_col8, #T_8096c_row2_col9, #T_8096c_row3_col0, #T_8096c_row3_col1, #T_8096c_row3_col2, #T_8096c_row3_col3, #T_8096c_row3_col4, #T_8096c_row3_col5, #T_8096c_row3_col6, #T_8096c_row3_col7, #T_8096c_row3_col8, #T_8096c_row3_col9, #T_8096c_row4_col0, #T_8096c_row4_col1, #T_8096c_row4_col2, #T_8096c_row4_col3, #T_8096c_row4_col4, #T_8096c_row4_col5, #T_8096c_row4_col6, #T_8096c_row4_col7, #T_8096c_row4_col8, #T_8096c_row4_col9, #T_8096c_row5_col0, #T_8096c_row5_col1, #T_8096c_row5_col2, #T_8096c_row5_col3, #T_8096c_row5_col4, #T_8096c_row5_col5, #T_8096c_row5_col6, #T_8096c_row5_col7, #T_8096c_row5_col8, #T_8096c_row5_col9, #T_8096c_row6_col0, #T_8096c_row6_col1, #T_8096c_row6_col2, #T_8096c_row6_col3, #T_8096c_row6_col4, #T_8096c_row6_col5, #T_8096c_row6_col6, #T_8096c_row6_col7, #T_8096c_row6_col8, #T_8096c_row6_col9, #T_8096c_row7_col0, #T_8096c_row7_col1, #T_8096c_row7_col2, #T_8096c_row7_col3, #T_8096c_row7_col4, #T_8096c_row7_col5, #T_8096c_row7_col6, #T_8096c_row7_col7, #T_8096c_row7_col8, #T_8096c_row7_col9, #T_8096c_row8_col0, #T_8096c_row8_col1, #T_8096c_row8_col2, #T_8096c_row8_col3, #T_8096c_row8_col4, #T_8096c_row8_col5, #T_8096c_row8_col6, #T_8096c_row8_col7, #T_8096c_row8_col8, #T_8096c_row8_col9, #T_8096c_row9_col0, #T_8096c_row9_col1, #T_8096c_row9_col2, #T_8096c_row9_col3, #T_8096c_row9_col4, #T_8096c_row9_col5, #T_8096c_row9_col6, #T_8096c_row9_col7, #T_8096c_row9_col8, #T_8096c_row9_col9 {\n  text-align: center;\n}\n</style>\n<table id=\"T_8096c\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th id=\"T_8096c_level0_col0\" class=\"col_heading level0 col0\" >0</th>\n      <th id=\"T_8096c_level0_col1\" class=\"col_heading level0 col1\" >1</th>\n      <th id=\"T_8096c_level0_col2\" class=\"col_heading level0 col2\" >2</th>\n      <th id=\"T_8096c_level0_col3\" class=\"col_heading level0 col3\" >3</th>\n      <th id=\"T_8096c_level0_col4\" class=\"col_heading level0 col4\" >4</th>\n      <th id=\"T_8096c_level0_col5\" class=\"col_heading level0 col5\" >5</th>\n      <th id=\"T_8096c_level0_col6\" class=\"col_heading level0 col6\" >6</th>\n      <th id=\"T_8096c_level0_col7\" class=\"col_heading level0 col7\" >7</th>\n      <th id=\"T_8096c_level0_col8\" class=\"col_heading level0 col8\" >8</th>\n      <th id=\"T_8096c_level0_col9\" class=\"col_heading level0 col9\" >9</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_8096c_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n      <td id=\"T_8096c_row0_col0\" class=\"data row0 col0\" >153</td>\n      <td id=\"T_8096c_row0_col1\" class=\"data row0 col1\" >0</td>\n      <td id=\"T_8096c_row0_col2\" class=\"data row0 col2\" >0</td>\n      <td id=\"T_8096c_row0_col3\" class=\"data row0 col3\" >0</td>\n      <td id=\"T_8096c_row0_col4\" class=\"data row0 col4\" >1</td>\n      <td id=\"T_8096c_row0_col5\" class=\"data row0 col5\" >0</td>\n      <td id=\"T_8096c_row0_col6\" class=\"data row0 col6\" >0</td>\n      <td id=\"T_8096c_row0_col7\" class=\"data row0 col7\" >0</td>\n      <td id=\"T_8096c_row0_col8\" class=\"data row0 col8\" >0</td>\n      <td id=\"T_8096c_row0_col9\" class=\"data row0 col9\" >0</td>\n    </tr>\n    <tr>\n      <th id=\"T_8096c_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n      <td id=\"T_8096c_row1_col0\" class=\"data row1 col0\" >0</td>\n      <td id=\"T_8096c_row1_col1\" class=\"data row1 col1\" >124</td>\n      <td id=\"T_8096c_row1_col2\" class=\"data row1 col2\" >8</td>\n      <td id=\"T_8096c_row1_col3\" class=\"data row1 col3\" >1</td>\n      <td id=\"T_8096c_row1_col4\" class=\"data row1 col4\" >0</td>\n      <td id=\"T_8096c_row1_col5\" class=\"data row1 col5\" >2</td>\n      <td id=\"T_8096c_row1_col6\" class=\"data row1 col6\" >4</td>\n      <td id=\"T_8096c_row1_col7\" class=\"data row1 col7\" >0</td>\n      <td id=\"T_8096c_row1_col8\" class=\"data row1 col8\" >4</td>\n      <td id=\"T_8096c_row1_col9\" class=\"data row1 col9\" >11</td>\n    </tr>\n    <tr>\n      <th id=\"T_8096c_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n      <td id=\"T_8096c_row2_col0\" class=\"data row2 col0\" >0</td>\n      <td id=\"T_8096c_row2_col1\" class=\"data row2 col1\" >6</td>\n      <td id=\"T_8096c_row2_col2\" class=\"data row2 col2\" >136</td>\n      <td id=\"T_8096c_row2_col3\" class=\"data row2 col3\" >4</td>\n      <td id=\"T_8096c_row2_col4\" class=\"data row2 col4\" >0</td>\n      <td id=\"T_8096c_row2_col5\" class=\"data row2 col5\" >0</td>\n      <td id=\"T_8096c_row2_col6\" class=\"data row2 col6\" >0</td>\n      <td id=\"T_8096c_row2_col7\" class=\"data row2 col7\" >2</td>\n      <td id=\"T_8096c_row2_col8\" class=\"data row2 col8\" >5</td>\n      <td id=\"T_8096c_row2_col9\" class=\"data row2 col9\" >1</td>\n    </tr>\n    <tr>\n      <th id=\"T_8096c_level0_row3\" class=\"row_heading level0 row3\" >3</th>\n      <td id=\"T_8096c_row3_col0\" class=\"data row3 col0\" >1</td>\n      <td id=\"T_8096c_row3_col1\" class=\"data row3 col1\" >0</td>\n      <td id=\"T_8096c_row3_col2\" class=\"data row3 col2\" >1</td>\n      <td id=\"T_8096c_row3_col3\" class=\"data row3 col3\" >143</td>\n      <td id=\"T_8096c_row3_col4\" class=\"data row3 col4\" >0</td>\n      <td id=\"T_8096c_row3_col5\" class=\"data row3 col5\" >0</td>\n      <td id=\"T_8096c_row3_col6\" class=\"data row3 col6\" >0</td>\n      <td id=\"T_8096c_row3_col7\" class=\"data row3 col7\" >4</td>\n      <td id=\"T_8096c_row3_col8\" class=\"data row3 col8\" >2</td>\n      <td id=\"T_8096c_row3_col9\" class=\"data row3 col9\" >3</td>\n    </tr>\n    <tr>\n      <th id=\"T_8096c_level0_row4\" class=\"row_heading level0 row4\" >4</th>\n      <td id=\"T_8096c_row4_col0\" class=\"data row4 col0\" >1</td>\n      <td id=\"T_8096c_row4_col1\" class=\"data row4 col1\" >3</td>\n      <td id=\"T_8096c_row4_col2\" class=\"data row4 col2\" >0</td>\n      <td id=\"T_8096c_row4_col3\" class=\"data row4 col3\" >0</td>\n      <td id=\"T_8096c_row4_col4\" class=\"data row4 col4\" >143</td>\n      <td id=\"T_8096c_row4_col5\" class=\"data row4 col5\" >0</td>\n      <td id=\"T_8096c_row4_col6\" class=\"data row4 col6\" >0</td>\n      <td id=\"T_8096c_row4_col7\" class=\"data row4 col7\" >7</td>\n      <td id=\"T_8096c_row4_col8\" class=\"data row4 col8\" >0</td>\n      <td id=\"T_8096c_row4_col9\" class=\"data row4 col9\" >0</td>\n    </tr>\n    <tr>\n      <th id=\"T_8096c_level0_row5\" class=\"row_heading level0 row5\" >5</th>\n      <td id=\"T_8096c_row5_col0\" class=\"data row5 col0\" >1</td>\n      <td id=\"T_8096c_row5_col1\" class=\"data row5 col1\" >0</td>\n      <td id=\"T_8096c_row5_col2\" class=\"data row5 col2\" >0</td>\n      <td id=\"T_8096c_row5_col3\" class=\"data row5 col3\" >1</td>\n      <td id=\"T_8096c_row5_col4\" class=\"data row5 col4\" >1</td>\n      <td id=\"T_8096c_row5_col5\" class=\"data row5 col5\" >131</td>\n      <td id=\"T_8096c_row5_col6\" class=\"data row5 col6\" >3</td>\n      <td id=\"T_8096c_row5_col7\" class=\"data row5 col7\" >0</td>\n      <td id=\"T_8096c_row5_col8\" class=\"data row5 col8\" >0</td>\n      <td id=\"T_8096c_row5_col9\" class=\"data row5 col9\" >17</td>\n    </tr>\n    <tr>\n      <th id=\"T_8096c_level0_row6\" class=\"row_heading level0 row6\" >6</th>\n      <td id=\"T_8096c_row6_col0\" class=\"data row6 col0\" >1</td>\n      <td id=\"T_8096c_row6_col1\" class=\"data row6 col1\" >1</td>\n      <td id=\"T_8096c_row6_col2\" class=\"data row6 col2\" >0</td>\n      <td id=\"T_8096c_row6_col3\" class=\"data row6 col3\" >0</td>\n      <td id=\"T_8096c_row6_col4\" class=\"data row6 col4\" >1</td>\n      <td id=\"T_8096c_row6_col5\" class=\"data row6 col5\" >0</td>\n      <td id=\"T_8096c_row6_col6\" class=\"data row6 col6\" >151</td>\n      <td id=\"T_8096c_row6_col7\" class=\"data row6 col7\" >0</td>\n      <td id=\"T_8096c_row6_col8\" class=\"data row6 col8\" >0</td>\n      <td id=\"T_8096c_row6_col9\" class=\"data row6 col9\" >0</td>\n    </tr>\n    <tr>\n      <th id=\"T_8096c_level0_row7\" class=\"row_heading level0 row7\" >7</th>\n      <td id=\"T_8096c_row7_col0\" class=\"data row7 col0\" >0</td>\n      <td id=\"T_8096c_row7_col1\" class=\"data row7 col1\" >0</td>\n      <td id=\"T_8096c_row7_col2\" class=\"data row7 col2\" >0</td>\n      <td id=\"T_8096c_row7_col3\" class=\"data row7 col3\" >0</td>\n      <td id=\"T_8096c_row7_col4\" class=\"data row7 col4\" >1</td>\n      <td id=\"T_8096c_row7_col5\" class=\"data row7 col5\" >1</td>\n      <td id=\"T_8096c_row7_col6\" class=\"data row7 col6\" >0</td>\n      <td id=\"T_8096c_row7_col7\" class=\"data row7 col7\" >152</td>\n      <td id=\"T_8096c_row7_col8\" class=\"data row7 col8\" >0</td>\n      <td id=\"T_8096c_row7_col9\" class=\"data row7 col9\" >0</td>\n    </tr>\n    <tr>\n      <th id=\"T_8096c_level0_row8\" class=\"row_heading level0 row8\" >8</th>\n      <td id=\"T_8096c_row8_col0\" class=\"data row8 col0\" >0</td>\n      <td id=\"T_8096c_row8_col1\" class=\"data row8 col1\" >15</td>\n      <td id=\"T_8096c_row8_col2\" class=\"data row8 col2\" >2</td>\n      <td id=\"T_8096c_row8_col3\" class=\"data row8 col3\" >2</td>\n      <td id=\"T_8096c_row8_col4\" class=\"data row8 col4\" >0</td>\n      <td id=\"T_8096c_row8_col5\" class=\"data row8 col5\" >4</td>\n      <td id=\"T_8096c_row8_col6\" class=\"data row8 col6\" >2</td>\n      <td id=\"T_8096c_row8_col7\" class=\"data row8 col7\" >2</td>\n      <td id=\"T_8096c_row8_col8\" class=\"data row8 col8\" >119</td>\n      <td id=\"T_8096c_row8_col9\" class=\"data row8 col9\" >8</td>\n    </tr>\n    <tr>\n      <th id=\"T_8096c_level0_row9\" class=\"row_heading level0 row9\" >9</th>\n      <td id=\"T_8096c_row9_col0\" class=\"data row9 col0\" >0</td>\n      <td id=\"T_8096c_row9_col1\" class=\"data row9 col1\" >3</td>\n      <td id=\"T_8096c_row9_col2\" class=\"data row9 col2\" >0</td>\n      <td id=\"T_8096c_row9_col3\" class=\"data row9 col3\" >5</td>\n      <td id=\"T_8096c_row9_col4\" class=\"data row9 col4\" >4</td>\n      <td id=\"T_8096c_row9_col5\" class=\"data row9 col5\" >1</td>\n      <td id=\"T_8096c_row9_col6\" class=\"data row9 col6\" >0</td>\n      <td id=\"T_8096c_row9_col7\" class=\"data row9 col7\" >6</td>\n      <td id=\"T_8096c_row9_col8\" class=\"data row9 col8\" >2</td>\n      <td id=\"T_8096c_row9_col9\" class=\"data row9 col9\" >133</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\nConfusion Matrix. Tally of Actual (row) Vs. Predicted (col)\"\n:::\n\nExciting! Just shy of 90% accuracy is the score to beat. And we can see which deigits performed better or worse. Row 8 shows that numbe r8 had the worst performance, with only 119/154 images classified correctly, with most 8's being incorrectly classified as 1's, or 9's. Following that, 5's had 131/154 correct, with 17 instances incorrectly classified as a 9. Now, we are *ready* to make a neural network.\n\n::: {.callout-important }\n\nIf you want to understand each line of everything that follows, a strong grasp of broadcasting will be critical.\n:::\n\n# Outro\n\nA couple of key take aways from this portion of the fastAI lesson. A notable one not to skip si the fact that there is no sense deploying neural networks if other methods can do the job better, so we should always be verifying that we perform better than the alternatives. I really had a few a-ha moments in learning about the broadcasting techniques and so I felt it would be great to share. It was a lot easier to scribble the drawings on paper than to put them on the screen but I hope you find them illuminating!\n\nI *was* able to create that neural net to classify digits more accurately, in the end. I'll walk through that in the next post.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}