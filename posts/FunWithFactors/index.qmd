---
title: "Learning Quarto with Factors"
author: "David De Sa"
date: "2023-03-09"
categories: [math,python]
format:
  html:
    code-fold: true
    toc: true
    code-tools: true
---

## TL;DR
I'm fooling around with math to play with Quarto, a great tool for combining markup and code.

# What'n'tir'nation? ^[For years this idiom had me wondering what exactly a 'tarnation' was anyway, as in "What in tarnation?". Was it a sooty nation of tar? Maybe a flower, like a carnation? (Likely another word I am misspelling from only ever heard it and not read it). Finally one day my brother opened my eyes to what I can only conclude *must* be the origin of the phrase: "What in the entire nation?". Say it fast 10 times and you'll get the idea!' You may wonder why I don't just google it... I've no itnernet connection while writing this, and it makes for a procrastination tool to stop me from actually getting to the coding!]
Imagine my reaction when I spend a few hours trying to fix my old [fastpages](fastpages.com) blog  only to realize the project was deprecated and my efforts were for naught. What, indeed. Not all was lost, however, as a new champion had risen in the jupyter-integrated blogosphere: Quarto^[Did you know? In Portuguese, "Quarto" can mean either 'room' (as in, 'get out of my room!') or 'fourth' (in sequence) or a quaarter of a whole, depending on context.]!

# Factoring 
Caught with no internet connection and wanting some basis on which to fool around with numbers and create visualizations, I decided to investigate things related to factors because I saw a cool video about it the other day. I'm interested in doing the following, for some arbitrary range [1,N]:

 - Plotting the number of factors each number has
 - Plotting the number of times each given number appears as a factor
 - Plotting the number of factors going into a numbers prime factorization
    - *i.e. if a factor is factorable, factor again. Repeat until all that remains are prime numbers. These are the prime factors*

```{python}
# Dependencies:
import plotly.io as pio
import plotly.express as px
import matplotlib.pyplot as plt
import numpy as np
import math
```

## Counting Factors
First lets define a function that returns the number factors for any given number:
```{python}


def factors(n):
    if type(n) != int:
        return "err: fraction"
    f = [1]  # initialize
    for d in range(2, math.ceil(n/2)+1):
        if int(n/d) == (n/d):
            f.append(d)
    f.append(n)  # Close out with itself as a factor
    return f


```

```{python}
print("10 has factors: " + str(factors(10)))
print("78 has factors: " + str(factors(78)))
print("93486 has factors: " + str(factors(93486)))
```

## Factor Frequency
OK, I want to test a theory... if you plot the number of times a given number n appears as a factor across all numbers in range 0->N, you would expect to create a discete distribution matching the function N/n. Lets give it a try:

```{python}
# | label: fig-nn
# | fig-cap: "Frequencies of a number appearing as a factor across a range of numbers"
# | column: page
nums = range(1, 1001)
fg, ax = plt.subplots()
# In the following, for each number in 1->N, we observe if that number is a factor for every other number in collection 1->N. Tally those instances to say how many times that number is a factor
facts = [sum([i in factors(n) for n in nums if i < (n/2)])
         for i in range(1, 1001)]
# Just display the first bit of the distribution
ax.plot(nums[:50], facts[:50])
ax.set_xlabel('n')
ax.set_ylabel('# of instances of n as a factor for numbers in range [1,N]')
plt.show()
```

Nice. @fig-nn confirms the theory.

## Quantity of Factors
OK, here is a plot of the number of factors per number, from 1 to 1000, and a histogram showing the spread of how many factors a given number has.

```{python}
# | label: fig-fact_count
# | fig-cap: "Factors per number"
# | column: page
nums = range(1, 1001)
facts = [len(factors(n)) for n in nums]
fig, (ax1, ax2) = plt.subplots(1, 2)
ax1.set_title("Factor Counts")
ax1.set_xlabel('Number')
ax1.set_ylabel('Count of Factors')
ax1.plot(nums, facts)
n_bins = 20
ax2.set_title("Instances of Factor Counts")
ax2.set_xlabel('Count of Numbers with Count of Factors')
ax2.set_ylabel('Number')
ax2.hist(np.asarray(facts), bins=n_bins, orientation=u'horizontal')
fig.set_size_inches(12, 7)
plt.show()
print("(Number, # Factors): "+str([x for x in zip(nums, facts)]))
```

We can generally see that the number of factors increases as the numbers get bigger (no surprise) but what about the histogram of how often a given number has a given number of factors? The distribution is more starkly concentrated than I might have thought. Lets see what this looks like when we bump the analysis sample to 25,000. We'll switch from a line plot to a scatter plot with small dots so the visual isnt crowded out by the data points jumping up and down.

## Supersize Me!
```{python}
# | label: fig-25k
# | fig-cap: "Factors per number up to 25K"
# | column: page
nums = range(1, 25001)
facts = [len(factors(n)) for n in nums]
fig, (ax1, ax2) = plt.subplots(1, 2)
ax1.set_title("Factor Counts")
ax1.scatter(nums, facts, s=2)
n_bins = 90
ax2.set_title("Instances of Factor Counts")
ax2.hist(np.asarray(facts), bins=n_bins, orientation=u'horizontal', log=True)
fig.set_size_inches(12, 7)
plt.show()
print("(Number, # Factors): "+str([x for x in zip(nums, facts)]))
```
Interesting! It almost looks like a morse code sequence... Here is a great [youtube video](https://www.youtube.com/watch?v=M48319x1Kg4) that actually inspired me to tinker with this idea of factorizations in which the creator puts sound to this sequence. Note that for this plot, I used a log scale on the histogram on the right side since the occurrence of low numbers as factors was so much greater than that of larger numbers. Again, it is interesting to see the way in which these tallies aren't all continuous at a fine level, but looked at broadly, there seem to be these patterns of density cutting across the plot, as shown in the following figure:

![](lines_on_plot.jpg){fig-alt="Repeating diagonal lines of plot density." fig-align="center"}

## Prime Factorization 
Let's make a function that yields the prime factorization for a given number input. This will use recursion to keep on digging until all prime factors are found. More info on the method [here](https://www.cuemath.com/numbers/prime-factorization/). And we'll fool around with a different method for captioning Figures since this is still about learning how to use Quarto! Building off of the last example, I thought I should run multiple examples, one up to 1000, the other up to 25000, for the sake of seeing if a different pattern appeared.
```{python}
# | column: page


def smol_prime(n):
    # Return the smallest prime factor of a number (only return 1 if no other factor other than the number itself)
    facts = factors(n)[1:]  # First get all factors
    sf = 1  # initialize for case of prime argument
    for i in range(2, math.ceil((n/2)+1)):
        if int(n/i) == (n/i) and len(factors(i)) == 2:
            # smallest prime of n found
            sf = i
            break
    return sf


def prime_factorization(n, prime_facts=[], first=True):
    if first == True:
        prime_facts = []
    if len(factors(n)) == 2 and first == True:  # Case of prime number argument up front
        return (1, n)
    else:  # Case of number for prime factorization
        if len(factors(n)) == 2:  # Case of final prime reached
            prime_facts.append(n)
            return prime_facts
        else:  # Case of not final prime reached, add smallest prime factor to list, and recurse with argument of current n divided by its smallest prime factor
            sf = smol_prime(n)
            prime_facts.append(sf)
            return prime_factorization(int(n/sf), prime_facts, False)


```

```{python}
# | label: fig-fctznsvzld1000
# | fig-cap: "Prime Factorizations to 1000"
# | fig-subcap:
# |     - "Count of Primes"
# |     - "Tally of  Primes"
# |     - "Count of Unique Primes"
# |     - "Tally of Unique Primes"
# | column: page
# | layout-ncol: 2
nums = range(1, 1001)
factzn = [len(prime_factorization(n)) for n in nums]
unqfactzn = [len(set(prime_factorization(n))) for n in nums]
fig, ax = plt.subplots()
ax.set_title("# of Primes in Prime Fact'z'n")
ax.scatter(nums, factzn, s=1)
plt.show()
fig, ax = plt.subplots()
ax.set_title("Tally")
ax.hist(np.asarray(factzn), bins=15, orientation=u'horizontal', log=True)
plt.show()
fig, ax = plt.subplots()
ax.set_title("# of Unique Primes in Prime Fact'z'n")
ax.scatter(nums, unqfactzn, s=1)
plt.show()
fig, ax = plt.subplots()
ax.set_title("Tally")
ax.hist(np.asarray(unqfactzn), bins=5,
        orientation=u'horizontal', log=True)
plt.show()
```

Interesting... the number of integers with higher counts factors in their prime factorization drops off in a pretty clean lookng exponential rate, as shown by the sparcity of points the higher you go in @fig-fctznsvzld1000-1. The clean exponential rate is demonstrated by the pretty clear linear trend in the log scale context of @fig-fctznsvzld1000-2. Meanwhile, @fig-fctznsvzld1000-3 and @fig-fctznsvzld1000-4 show us that while there are some numbers with as many as 9 elements in their prime factorization, there are never more than 4 unique primes in a given factorization.

Out of curiosity, lets see the most complex prime factorizations from this set:
```{python}
max_idx = 0  # Will loop until all are printed since index function finds 1 at time
max_facts = max(factzn)
for i in range(0, sum([f == max_facts for f in factzn])):
    idx = factzn.index(max_facts, max_idx)
    print(str(idx+1)+" is the product of: " + str(prime_factorization(idx+1)))
    max_idx = idx+1
```

Huh... well I suppose thats not very exciting but it does make sense... since two is the lowest prime number, the numbers with the largest number of prime factors in their prime factorization will be the powers of two... it's like; if you were challenged with buying the most items with a given number of dollars, you would simply buy as many of the cheapest item as you could.

I wonder if the unique factorization might be more interesting...
```{python}
max_idx = 0  # Will loop until all are printed since index function finds 1 at time
max_facts = max(unqfactzn)
for i in range(0, sum([f == max_facts for f in unqfactzn])):
    idx = unqfactzn.index(max_facts, max_idx)
    print(str(idx+1)+" is the product of " + str(len(set(prime_factorization(idx+1)))
                                                 )+" unique numbers: " + str(prime_factorization(idx+1)))
    max_idx = idx+1
```

OK, there is more to see here. I wonder if there might be a pattern in the gap between these numbers:

```{python}
# | label: fig-fff
# | fig-cap: "Difference between nums with most complex prime factorization in set."
# | column: page
max_idx = 0  # Will loop until all are printed since index function finds 1 at time
max_facts = max(unqfactzn)
nums = []  # To store relevant nums, those found with highest # unique factors in prime factorization
for i in range(0, sum([f == max_facts for f in unqfactzn])):
    idx = unqfactzn.index(max_facts, max_idx)
    nums.append(idx+1)
    max_idx = idx+1
fig, ax = plt.subplots()
ax.scatter(nums[1:], [n-nums[nums.index(n)-1]
           for n in nums if nums.index(n) != 0])
plt.show()
```
@fig-fff is what you get when you plot , on the x axis, the numbers with the most complex prime factorization, and on the y axis, the subtracting the previous number in the set from that one. I.e., if you;re walking the number line, how many integers do you pass before reaching the next number thats part of this set of the most complex prime factorizations ( those having 4 unique factors in their prime factorization). On the face of it, we see that the higher we go, the less distance there is between numebrs of equal unique factor complexity. That makes intuitive sense to me. If you think of numbers less than 100, they are simply too small to have amny factors go into them. As you go higher, there is a positive correlation with the number of factors in general, which would simply statistically carry a larger correlation with the number of prime factors. I might be spying castles in the clouds, but It seems like there is a somewhat stable distribution of two straight lines angling down to the right. I wonder if that will appear again if we look at the same thing but for the set of all numbers 1 to 25000.


```{python}
# | label: fig-fctznsvzld25000
# | fig-cap: "Prime Factorizations to 25000"
# | column: page
nums = range(1, 25001)
factzn = [len(prime_factorization(n)) for n in nums]
unqfactzn = [len(set(prime_factorization(n))) for n in nums]
fig, ax = plt.subplots(2, 2, sharex='col', sharey='row')
ax[0, 0].set_title("# of Primes in Prime Fact'z'n")
ax[0, 0].scatter(nums, factzn, s=1)
ax[0, 1].set_title("Tally")
ax[0, 1].hist(np.asarray(factzn), bins=15, orientation=u'horizontal', log=True)
ax[1, 0].set_title("# of Unique Primes in Prime Fact'z'n")
ax[1, 0].scatter(nums, unqfactzn, s=1)
ax[1, 1].set_title("Tally")
ax[1, 1].hist(np.asarray(unqfactzn), bins=5,
              orientation=u'horizontal', log=True)
fig.tight_layout()
plt.show()
```

Hmm.. I attribute the gaps in the histogram on the top right to simply be a bucketing issue. The exponential trend is still visible though these seems to be more of a curve to it. I wonder if thats just an artifact of arbitrarily stopping the tallying at 25,000? I suspect if we were to continue, the count would fill in more and continue that linear trend. But we'll leave that there for now.

Curious to see a realtively tight race between 2 and 3 for the count of unique factors in prime factorization.

Lets see that plot of the differences between the numbers with 5 unique prime factors.

```{python}
# | label: fig-ffff
# | fig-cap: "Difference between nums with most complex prime factorization in set."
# | column: page
max_idx = 0  # Will loop until all are printed since index function finds 1 at time
max_facts = max(unqfactzn)
nums = []  # To store relevant nums, those found with highest # unique factors in prime factorization
for i in range(0, sum([f == max_facts for f in unqfactzn])):
    idx = unqfactzn.index(max_facts, max_idx)
    nums.append(idx+1)
    max_idx = idx+1
fig, ax = plt.subplots()
ax.scatter(nums[1:], [n-nums[nums.index(n)-1]
           for n in nums if nums.index(n) != 0])
plt.show()
```

For the same reason as before, it matches intuition that there should be an increased density of these numbers the higher you go. But I was surprised by the number of samples in this set. That makes me wonder - how high do you have to go to get a number with 6 unique numbers in its prime factorization? What is the relationship between the first number with 3 prime factors in factorization, 5,6,7 etc? Well, to try and explore this, I tried the following code:
```{python}
# | column: page
ufs = [(1, [1]), (2, [1, 2])]  # Initialize
max_f = 2
i = 3
while max_f < 1:
    pf = prime_factorization(i)
    if len(set(pf)) > max_f:
        max_f = len(set(pf))
        ufs.append((i, pf))
    if i % 1000 == 0:
        print(i)
    i += 1
```
Unfortunately, the functions I've made are very simplistic in the brute-force approach to factorization, so they have your computer working overtime on a task like this. It ran for more than 20 minutes and couldn't find the smallest number with a prime factorization of 8 unique numbers. When i tried running the search to a limit of 6 though, I saw this pattern: (#,[Prime factors for #])
```{python}
# | column: page
print([(1, [1]),
       (2, [1, 2]),
       (30, [2, 3, 5]),
       (210, [2, 3, 5, 7]),
       (2310, [2, 3, 5, 7, 11]),
       (30030, [2, 3, 5, 7, 11, 13])])
```
 And I thought... wow, of course! The sequence is just the net multiplication of the smallest prime numbers... Just goes to show, a little bit of thinking can save a lot of work. And a reminder not to forget ones lessons! I should've realized what the result would be here following from finding that the number with the largest prime factorization would be the successive powers of 2. 
 
 A good note to end off on.
